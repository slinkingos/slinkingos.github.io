<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[C瓜哥--工作站]]></title>
  <link href="http://slinkingos.github.io/atom.xml" rel="self"/>
  <link href="http://slinkingos.github.io/"/>
  <updated>2015-06-01T00:07:43+08:00</updated>
  <id>http://slinkingos.github.io/</id>
  <author>
    <name><![CDATA[林辉(link)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RT-Thread——初步认识]]></title>
    <link href="http://slinkingos.github.io/blog/2015/05/31/chu-shi-rt-thread/"/>
    <updated>2015-05-31T23:07:01+08:00</updated>
    <id>http://slinkingos.github.io/blog/2015/05/31/chu-shi-rt-thread</id>
    <content type="html"><![CDATA[<p>最近腾讯发布自己的物联网操作系统TOS，华为对外发布LiteOS，google发布brillo并提出Weave通信框架。这所有的一切，都表明互联网公司都在第一时间抢占物联网IOT这块蛋糕。
接触UCOS-II已经1年了，总感觉UCOS-II使用起来缺点什么（可能是以前一直使用Linux的缘故）。于是乎想跟着某一个物联网操作系统去做，但是苦于这些平台太新了，学习资源非常的少。较早前曾经在上一家公司初步认识了一款国产的开源实时操作系统——RT-thread。于是就有了学习RT-thread的计划。</p>

<h2><strong>RT-Thread内核及组件</strong></h2>

<p>RT-Thread RTOS 是一款来自中国的开源实时操作系统，由国内一些专业开发人员开发、维护。它不仅仅是一款高效、稳定的实时操作系统内核，也是一套面向嵌入式系统的软件平台，覆盖了:</p>

<blockquote><ul>
<li>全抢占的实时操作系统内核</li>
<li>小巧而与底层具体实现无关的文件系统</li>
<li>轻型的TCP/IP协议栈</li>
<li>命令即C语言的shell命令行</li>
<li>轻型的多窗口多线程图形用户界面</li>
</ul>
</blockquote>

<p>目前RT-Thread RTOS在国内已经有十多家企业在使用，从数据采集、数据监控到机械控制，从ARM7芯片到STM32、LM3S等的Cortex-M3芯片，从实时内核、文件系统、shell命令行到轻型TCP/IP网络协议栈，RT-Thread RTOS被证明是一款可用于产品并稳定运行的嵌入式实时操作系统。</p>

<h2><strong>RT-Thread实时内核</strong></h2>

<h2>RT-Thread实时操作系统核心是一个高效的硬实时核心，它具备非常优异的实时性、稳定性、可剪裁性。最小可以到3k ROM占用、1k RAM占用。</h2>

<h3>内核对象系统</h3>

<p>实时线程操作系统内部采用面向对象的方式设计，内建内核对象管理系统，能够访问/管理所有内核对象。内核对象包含了内核中绝大部分设施，而这些内核对象可以是静态分配的静态对象，也可以是从系统内存堆中分配的动态对象。通过内核对象系统，RT-Thread可以做到不依赖于具体的内存分配方式，伸缩性得到极大的加强。</p>

<h3>任务/线程调度</h3>

<p>支持以线程为基本调度单位的多任务系统。调度算法是基于优先级的全抢占式线程调度，支持256个线程优先级（亦可配置成32个线程优先级），0优先级代表最高优先级，255优先级留给空闲线程使用；相同优先级上支持多个线程，这些相同优先级的线程采用可设置时间片长度的时间片轮转调度；调度器寻找下一个最高优先级就绪线程的时间是恒定的(O(1))。系统不限制线程数量的多少，只与物理平台的具体内存相关。</p>

<h3>同步机制</h3>

<p>系统支持semaphore，mutex等线程间同步机制。mutex采用优先级继存方式以防止优先级翻转。semaphore释放动作可安全用于中断服务例程中。同步机制支持线程按优先级等待或按先进先出方式获取信号量或互斥锁。</p>

<h3>通信机制</h3>

<p>系统支持event，mailbox，message queue通信机制等。event支持多事件"或触发"及"与触发"，适合于线程等待多个事件情况。mailbox中一个mail的长度固定为4字节，效 率较messagequeu高。通信设施中的发送动作可安全用于中断服务例程中。通信机制支持线程按优先级等待或按先进先出方式获取。</p>

<h3>时钟，定时器</h3>

<p>系统默认使用时钟节拍来完成同优先级任务的时间片轮转调度；线程对内核对象的时间敏感性是通过系统定时器来实现的；定时器又分成了硬定时器和软定时器，一 次定时及周期性定时。</p>

<h3>内存管理</h3>

<p>系统支持静态内存池管理及动态内存堆管理。从静态内存池中获取/释放内存块时间恒定，而当内存池空时，可根据申请线程请求把申请线程挂起、立刻返回、或等 待一段时间仍未获得返回。当其他线程释内存块到内存池时，将把挂起的线程唤醒。对于系统内存紧张的系统，RT-Thread也提供了小型的伙伴内存管理算 法。而对于拥有大一些内存的嵌入式系统，RT-Thread提供了性能非常高效的SLAB内存管理系统。</p>

<h3>诊断</h3>

<p>通过系统提供的FinSH shell系统，能够查看到线程，信号量，互斥锁，事件，邮箱，消息队列的运行情况，以及各个线程的栈使用情况。</p>

<h2>RT-Thread与UCOS-II的对比</h2>

<table>
<thead>
<tr>
<th>  </th>
<th style="text-align:left;">  UCOS-II  </th>
<th style="text-align:left;">  RT-Thread  </th>
</tr>
</thead>
<tbody>
<tr>
<td>任务/线程调度 </td>
<td style="text-align:left;"> 256个优先级，不允许有相同优先级任务，最大256个任务 </td>
<td style="text-align:left;"> 256/32/8个优先级，允许存在相同优先级线程，线程数不受限制，允许动态创建/删除线程 </td>
</tr>
<tr>
<td> 同步互斥机制 </td>
<td style="text-align:left;"> semaphore,mutex,mailbox,message queue,event, mailbox只能存放一条信息 </td>
<td style="text-align:left;"> semaphore,mutex,mailbox,message queue,event, mailbox可存储多条信息 </td>
</tr>
<tr>
<td> 内存管理 </td>
<td style="text-align:left;"> 固定大小内存块管理 </td>
<td style="text-align:left;"> 固定分区存储管理，小内存系统动态内存管理，大内存系统slab内存管理 </td>
</tr>
<tr>
<td> 定时器 </td>
<td style="text-align:left;"> 只能使用OSTimeDly进行时间间隔处理 </td>
<td style="text-align:left;"> 挂接到OS定时器的硬定时器和软定时器 </td>
</tr>
<tr>
<td> 终端嵌套 </td>
<td style="text-align:left;"> 允许 </td>
<td style="text-align:left;"> 允许 </td>
</tr>
</tbody>
</table>


<hr />

<h3>参考资料：</h3>

<p>1、<a href="http://www.rt-thread.org/">http://www.rt-thread.org/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim插件初识]]></title>
    <link href="http://slinkingos.github.io/blog/2015/05/23/vim%E6%8F%92%E4%BB%B6%E5%88%9D%E8%AF%86/"/>
    <updated>2015-05-23T16:35:57+08:00</updated>
    <id>http://slinkingos.github.io/blog/2015/05/23/vim插件初识</id>
    <content type="html"><![CDATA[<h2>Vim脚本</h2>

<p>vim有一套自己的脚本语言，通过这种脚本语言可以实现与vim交互的，达到功能扩展的目的。常见的 .vimrc、_vimrc、Syntax 等文件都是 Vim 脚本文件。一系列的Vim脚本自由的组合成了Vim插件。</p>

<h2>Vim插件类型</h2>

<p>vim插件目前分为两类：<em><strong>.vim</strong> 和</em><strong>.vba</strong>。</p>

<p><strong>1、*.vim插件：</strong> 实际上就是一个文本文件，通常someplugin.vim（插件脚本）与someplugin.txt（插件帮助文件）并存在一个打包文件中，解包后将someplugin.vim拷贝到~/.vim/plugin/目录，someplugin.txt拷贝到~/.vim/doc/目录即可完成安装，重启vim后刚安装的插件就已经生效，但帮助文件需执行helptags~/.vim/doc/才能生效。</p>

<p><strong>2、*.vba插件：</strong>该插件安装便捷，只需在shell中依次执行如下命令即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span><span class="n">vim</span> <span class="n">someplugin</span><span class="o">.</span><span class="n">vba</span>
</span><span class='line'><span class="p">:</span><span class="n">so</span><span class="o">%</span>
</span><span class='line'><span class="p">:</span><span class="n">q</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看插件帮助文档（:hsomeplugin）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add 404 Page]]></title>
    <link href="http://slinkingos.github.io/blog/2015/05/17/add-404-page/"/>
    <updated>2015-05-17T19:08:53+08:00</updated>
    <id>http://slinkingos.github.io/blog/2015/05/17/add-404-page</id>
    <content type="html"><![CDATA[<p>&mdash; <em>email</em>: <a href="&#109;&#97;&#105;&#x6c;&#116;&#x6f;&#x3a;&#108;&#x69;&#110;&#x68;&#x75;&#105;&#x2e;&#53;&#x36;&#x38;&#x40;&#x31;&#54;&#51;&#46;&#x63;&#x6f;&#109;">&#x6c;&#x69;&#110;&#104;&#117;&#x69;&#46;&#x35;&#x36;&#56;&#x40;&#49;&#x36;&#x33;&#46;&#x63;&#111;&#x6d;</a>
&mdash; <em>work</em>: Software Engineer</p>
]]></content>
  </entry>
  
</feed>
